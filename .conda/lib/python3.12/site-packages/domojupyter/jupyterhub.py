from traitlets.config.configurable import LoggingConfigurable

import requests


class Jupyterhub(LoggingConfigurable):

    def __init__(self, jupyterhub_services_url, jupyterhub_api_token, workspace_id, workspace_session_id, **kwargs):
        self._jupyterhub_services_url = jupyterhub_services_url
        self._jupyterhub_api_token = jupyterhub_api_token
        self._workspace_id = workspace_id
        self._workspace_session_id = workspace_session_id

    def _add_auth_headers(self, headers):
        auth_headers = {'Authorization': f'Token {self._jupyterhub_api_token}'}
        return {**headers, **auth_headers}

    def _get(self, url, headers={'Accept': 'application/json'}):
        headers = self._add_auth_headers(headers)
        return requests.get(url, headers=headers)

    def _post(self, url, data, headers={'Accept': 'application/json'}):
        headers = self._add_auth_headers(headers)
        return requests.post(url, json=data, headers=headers)

    def _post_data(self, url, data, headers={'Accept': 'application/json'}):
        headers = self._add_auth_headers(headers)
        return requests.post(url, data=data, headers=headers)

    def get_workspace(self):
        url = f'{self._jupyterhub_services_url}/domo/v1/workspaces/{self._workspace_id}?workspace_session_id={self._workspace_session_id}'
        headers = {
            'Accept': 'application/json'
        }
        r = self._get(url, headers)
        workspace = r.json()
        if r.status_code != 200 or workspace is None:
            raise Exception(f'Failed to obtain workspace {self._workspace_id} {r.json()}')

        return r.json()

    def get_domo_access_token(self):
        url = f'{self._jupyterhub_services_url}/domo/v1/workspaces/{self._workspace_id}/auth/token?workspace_session_id={self._workspace_session_id}'
        headers = {
            'Accept': 'application/json'
        }
        r = self._get(url, headers=headers)
        r.raise_for_status()
        return r.json()

    def text_to_sql(self, text_to_sql_request):
        url = f'{self._jupyterhub_services_url}/domo/ai/v1/text/sql'
        headers = {
            'Accept': 'application/json'
        }
        r = self._post(url, text_to_sql_request, headers)
        if r.status_code != 200:
            raise Exception(
                f'Failed to do text to sql conversion for request: {text_to_sql_request} - {r.json()}')
        return r.json()

    def generate_text(self, text_generation_request):
        url = f'{self._jupyterhub_services_url}/domo/ai/v1/text/generation'
        headers = {
            'Accept': 'application/json'
        }
        r = self._post(url, text_generation_request, headers)
        if r.status_code != 200:
            raise Exception(
                f'Failed to generate text from provided prompt: {text_generation_request} - {r.json()}')
        return r.json()

    def text_to_beast_mode(self, text_to_beast_mode_request):
        url = f'{self._jupyterhub_services_url}/domo/ai/v1/text/beastmode'
        headers = {
            'Accept': 'application/json'
        }
        r = self._post(url, text_to_beast_mode_request, headers)
        if r.status_code != 200:
            raise Exception(
                f'Failed to do text to beastmode conversion for request: {text_to_beast_mode_request} - {r.json()}')
        return r.json()

    def summarize(self, text_summarization_request):
        url = f'{self._jupyterhub_services_url}/domo/ai/v1/text/summarize'
        headers = {
            'Accept': 'application/json'
        }
        r = self._post(url, text_summarization_request, headers)
        if r.status_code != 200:
            raise Exception(
                f'Failed to do text summarization for request: {text_summarization_request} - {r.json()}')
        return r.json()
