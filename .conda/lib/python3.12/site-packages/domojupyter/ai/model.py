import io
import tempfile

from domojupyter.ai.models.JupyterModelContext import JupyterModelContext
from domojupyter.domo import Domo, DomoHubAuthentication
from domojupyter.ai.models.CreateModelRequest import CreateModelRequest
from domojupyter import snapshot
import os
import tarfile

from domojupyter.jupyterhub import Jupyterhub

jupyterhub_services_url = os.getenv('JUPYTERHUB_SERVICES_URL', None)
jupyterhub_api_token = os.getenv('JUPYTERHUB_API_TOKEN', None)
domo_hostname = os.getenv('DOMO_HOSTNAME', None)
domo_resource_token = os.getenv('DOMO_RESOURCE_TOKEN')
workspace_id = os.getenv('DOMO_WORKSPACE_ID', None)
workspace_session_id = os.getenv('DOMO_WORKSPACE_SESSION_ID', None)

_jupyterhub = Jupyterhub(jupyterhub_services_url, jupyterhub_api_token, workspace_id, workspace_session_id)
_domo = Domo(domo_hostname, DomoHubAuthentication(_jupyterhub), workspace_id)


def create_model(name, entrypoint, files, snapshot_id=None, create_snapshot=False, description=None, training=None,
                 tasks=None):
    """
    Creates a model

    Parameters:
        name (str): name of the model
        entrypoint (str): entrypoint of the model
        files (list[str]): list of files to include in the model
        snapshot_id (str): id of the snapshot to use for the model
        create_snapshot (bool): whether to create a snapshot of the current python environment
        description (str): description of the model
        training (ModelTrainingInformation): ModelTrainingInformation object with training configuration
        tasks (List[ModelTask]): list of ModelTask objects with task configuration

    Returns:
        model_id (str): id of the model
    """
    print("Creating model")
    if create_snapshot and snapshot_id is not None:
        raise Exception("Cannot create a snapshot and use an existing snapshot at the same time")
    if create_snapshot:
        create_snapshot_response = snapshot.create_snapshot(name, True)
        model_snapshot_id = create_snapshot_response['id']
        print("Created new snapshot with id: " + model_snapshot_id)
    elif snapshot_id is not None:
        model_snapshot_id = snapshot_id
        print("Using existing snapshot with id: " + snapshot_id)
    else:
        snapshots = snapshot.list_snapshots()
        if len(snapshots) != 0:
            snapshots.sort(key=lambda x: x['created'], reverse=True)
            newest_snapshot = snapshots[0]
            model_snapshot_id = newest_snapshot['id']
            print("Using most recent snapshot: " + newest_snapshot['name'] + " " + newest_snapshot['created'])
        else:
            create_snapshot_response = snapshot.create_snapshot("New Snapshot", True)
            model_snapshot_id = create_snapshot_response['id']
            print("Created new snapshot with id: " + model_snapshot_id)

    current_working_directory = os.getcwd() + "/"
    additional_path = current_working_directory[11:]
    temp_dir = os.path.join(tempfile.gettempdir(), "tmp")
    os.makedirs(temp_dir, exist_ok=True)

    with tempfile.TemporaryDirectory(
        dir=current_working_directory, prefix="tmp"
    ) as tmpdir:
        temp_path = tmpdir + "/model.tar.gz"
        try:
            with tarfile.open(temp_path, "w:gz") as tar:
                tar.add(current_working_directory + entrypoint, arcname=additional_path + entrypoint)
                for file in files:
                    tar.add(current_working_directory + file, arcname=additional_path + file)
                tar.close()
        except Exception as e:
            print(f"An error occurred with the tar: {e}")

        tar_buffer = io.BytesIO()
        with open(temp_path, "rb") as f:
            tar_buffer.write(f.read())

    model_context = JupyterModelContext(workspace_id, model_snapshot_id, additional_path + entrypoint)
    create_model_request = CreateModelRequest(name, model_context, description, tasks, training)
    create_model_response = _domo.create_model(create_model_request.to_json(), workspace_id)

    model_id = create_model_response['id']
    _domo.upload_model_package(model_id, workspace_id, tar_buffer.getvalue())
    print("Successfully created model with name: " + name)
