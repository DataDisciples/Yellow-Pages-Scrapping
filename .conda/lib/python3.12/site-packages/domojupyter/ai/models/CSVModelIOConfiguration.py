from domojupyter.ai.models.DataSourceSchema import DataSourceSchema
from domojupyter.ai.models.ModelIOConfiguration import ModelIOConfiguration
from domojupyter.ai.models.Column import Column


class CSVModelIOConfiguration(ModelIOConfiguration):
    def __init__(self, data_frame=None, custom_schema=None):
        self.type = "CSV"
        self.media_type = "text/csv"
        if custom_schema is not None and data_frame is not None:
            raise ValueError("Cannot specify both custom schema and data frame")
        if custom_schema is not None:
            self.data_source_schema = custom_schema
        elif data_frame is not None:
            columns = self._get_schema_definition(data_frame)
            data_source_schema = DataSourceSchema(None, None, columns)
            self.data_source_schema = data_source_schema
        else:
            self.data_source_schema = None

    def to_json(self):
        return {
            "type": self.type,
            "mediaType": self.media_type,
            "schema": self.data_source_schema.to_json() if self.data_source_schema is not None else None
        }

    @staticmethod
    def _convert_type(df_type):
        if df_type == 'object':
            return 'STRING'
        elif df_type == 'category':
            return 'STRING'
        elif df_type == 'int64':
            return 'LONG'
        elif df_type == 'Int64':
            return 'LONG'
        elif df_type == 'float64':
            return 'DOUBLE'
        elif df_type == 'bool':
            return 'LONG'
        elif df_type == 'datetime64' or df_type == 'datetime64[ns]':
            return 'DATETIME'
        return 'STRING'

    def _get_schema_definition(self, df):
        columns = []
        for ind, column in enumerate(df.columns):
            columns.append(Column(name=column, data_type=self._convert_type(df.dtypes.iloc[ind].name)))
        return columns
