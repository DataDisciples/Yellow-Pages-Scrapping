import json

from .domo import Domo, DomoDataflowAuthentication, DomoHubAuthentication, DomoResourceTokenAuthentication
from .jupyterhub import Jupyterhub
import os

__all__ = ['get_document', 'get_documents', 'query_documents', 'create_document', 'create_documents', 'delete_document', 'delete_documents', 'update_document', 'update_documents']

jupyterhub_services_url = os.getenv('JUPYTERHUB_SERVICES_URL', None)
jupyterhub_api_token = os.getenv('JUPYTERHUB_API_TOKEN', None)
domo_hostname = os.getenv('DOMO_HOSTNAME', None)
domo_resource_token = os.getenv('DOMO_RESOURCE_TOKEN')
workspace_id = os.getenv('DOMO_WORKSPACE_ID', None)
workspace_session_id = os.getenv('DOMO_WORKSPACE_SESSION_ID', None)

if domo_resource_token is None:
    _jupyterhub = Jupyterhub(jupyterhub_services_url, jupyterhub_api_token, workspace_id, workspace_session_id)
    _domo = Domo(domo_hostname, DomoHubAuthentication(_jupyterhub), workspace_id)
else:
    _resource_token_domo = Domo(domo_hostname, DomoResourceTokenAuthentication(domo_resource_token), workspace_id)
    _domo = Domo(domo_hostname, DomoDataflowAuthentication(_resource_token_domo, workspace_id), workspace_id)


def _find_collection_id(collection_identifier):
    workspace = _domo.get_workspace()
    for collection in workspace['collectionConfiguration']:
        if collection['collectionId'] == collection_identifier:
            return collection['collectionId']
        elif collection['alias'] == collection_identifier:
            return collection['collectionId']

    return None


def get_document(collection, document_id):
    """
    Get AppDB document from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        document_id (str): id for AppDB Document

    Returns:
        document: AppDB Document object.
    """
    collection_id = _find_collection_id(collection)
    document = _domo.get_document(collection_id, document_id)
    return document


def get_documents(collection, offset, limit):
    """
    Get AppDB document from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        offset (Int): offset for list of documents
        limit (Int): limit for list of documents

    Returns:
        documents: List of AppDB Document objects.
    """
    collection_id = _find_collection_id(collection)
    documents = _domo.get_documents(collection_id, offset, limit)
    return documents


def query_documents(collection, document_query):
    """
    Query AppDB documents from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        document_query (Document Query): AppDB Document Query object
    """
    collection_id = _find_collection_id(collection)
    document_query["jsonQuery"] = json.dumps(document_query["jsonQuery"])
    _domo.query_documents(collection_id, document_query)


def create_document(collection, document):
    """
    Get AppDB document from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        document (DocumentDefinition): AppDB DocumentDefinition object
    """
    collection_id = _find_collection_id(collection)
    _domo.create_document(collection_id, document)


def create_documents(collection, documents):
    """
    Get AppDB document from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        documents (list): list of AppDB DocumentDefinition objects
    """
    collection_id = _find_collection_id(collection)
    _domo.create_documents(collection_id, documents)


def delete_document(collection, document_id):
    """
    Get AppDB document from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        document_id (str): id for AppDB Document
    """
    collection_id = _find_collection_id(collection)
    _domo.delete_document(collection_id, document_id)


def delete_documents(collection, document_ids):
    """
    Get AppDB document from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        document_ids (list): list of document UUID ids
    """
    collection_id = _find_collection_id(collection)
    _domo.delete_documents(collection_id, document_ids)


def update_document(collection, document_update):
    """
    Update a AppDB document from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        document_update (DocumentUpdate): document update object
    """
    collection_id = _find_collection_id(collection)
    _domo.update_document(collection_id, document_update)


def update_documents(collection, documents):
    """
    Update AppDB documents from a collection on the workspace

    Parameters:
        collection (str): collectionId or Collection's alias
        documents (list): list of DocumentDefinition objects
    """
    collection_id = _find_collection_id(collection)
    _domo.update_documents(collection_id, documents)
