from . import config
from domojupyter.ai.models import PromptTemplate, ChunkingConfiguration, SizeBoundary, SeparatorType, SummarizationOutputStyle

import pytest
import domojupyter.ai as ai
import pandas as pd

input_str = "What is the capital of Utah?"

sql_prompt_template = ai.PromptTemplate("What is the average age of people named Joe?")
text_prompt_template = ai.PromptTemplate("Write me new Frank Ocean song lyrics.")
parameters = {
    "name": "Alice"
}
model = "gpt-3.5-turbo"
model_configuration = {
    "temperature": 0.5,
    "max_length": 100
}
beast_mode_data_source_schema = ai.DataSourceSchema(
    "Sales",
    "Sales description",
    [
        ai.Column(
            "Date",
            "date"
        ),
        ai.Column(
            "Sales",
            "decimal"
        ),
        ai.Column(
            "Region",
            "integer"
        )
    ]
)

sql_input = "When was my average sale the highest for each region?"

sql_data_source_schemas = [ai.DataSourceSchema(
    "Sales",
    "Sales description",
    [
        ai.Column(
            "Date",
            "date"
        ),
        ai.Column(
            "Sales",
            "decimal"
        ),
        ai.Column(
            "Region",
            "integer"
        )
    ]
)]

sql_model_configuration = {
    "temperature": 0.5,
    "maxTokens": 1000
}

beast_mode_input = "Round Sales to 2 decimal places."


@pytest.mark.integration
def test_text_to_sql():
    print('test_text_to_sql')
    sql = ai.text_to_sql(sql_input)
    assert sql is not None


@pytest.mark.integration
def test_text_to_sql_data_source():
    print('test_text_to_sql_data_source')
    sql = ai.text_to_sql(sql_input, None, None, parameters, model,
                         sql_model_configuration, 'Test_DataSource')
    assert sql is not None


@pytest.mark.integration
def test_text_to_sql_data_frame():
    print('test_text_to_sql_data_frame')
    data = {
        'Name': ['John', 'Alice', 'Bob'],
        'Age': [25, 30, 35],
        'City': ['New York', 'Paris', 'London']
    }
    df = pd.DataFrame(data)

    # Set the name of the DataFrame
    df.name = 'MyDataFrame'
    sql = ai.text_to_sql('find me the rows where name = John', None, None, parameters, model,
                         sql_model_configuration, dataframe=df)
    assert sql is not None


@pytest.mark.integration
def test_text_to_sql_data_frame_Int64():
    print('test_text_to_sql_data_frame_Int64')
    data = {
        'Name': ['John', 'Alice', 'Bob'],
        'Age': pd.Series([25, 30, 35], dtype='Int64'),
        'City': ['New York', 'Paris', 'London']
    }
    df = pd.DataFrame(data)
    df.info()
    sql = ai.text_to_sql("find me the average age", dataframe=df)
    assert sql is not None


@pytest.mark.integration
def test_generate_text():
    print('test_generate_text')
    text = ai.generate_text(input_str)
    assert text is not None


@pytest.mark.integration
def test_text_to_beast_mode():
    print('test_text_to_beast_mode')
    beast_mode = ai.text_to_beast_mode(beast_mode_input, None, beast_mode_data_source_schema, None, None,
                                       model_configuration)
    assert beast_mode is not None


@pytest.mark.integration
def test_summarize():
    print('test_summarize')
    input_str = "The itsy bitsy spider climbed up the water spout. Down came the rain and washed the spider out. Out came the sun and dried up all the rain and the itsy bitsy spider climbed up the spout again."
    prompt_template = PromptTemplate("This is some text")
    parameters = {"name": "Zach"}
    model = 'gpt-3.5-turbo'
    model_configuration = {
        "temperature": 0.5,
        "max_length": 100
    }
    system = "You are a helpful assistant that writes concise summaries."
    chunking_configuration = ChunkingConfiguration(20, None, ["/n"], SeparatorType.TEXT, False)
    output_style = SummarizationOutputStyle.BULLETED
    output_word_length = SizeBoundary(1, 8)

    summary = ai.summarize(input_str, prompt_template, parameters, model, model_configuration, system, chunking_configuration, output_style, output_word_length)
    print(summary.prompt)
    print(summary.choices)
    assert summary is not None
