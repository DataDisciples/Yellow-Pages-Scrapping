import pandas as pd

from . import config
from domojupyter import read_dataframe, write_dataframe, get_account_property_value, get_account_property_keys
from domojupyter.domo import Domo
import pytest
import time


@pytest.mark.now
def test_export_query():
    print('test_export_query')
    input = read_dataframe('Test_DataSource', nlq='What is the average price?')
    print(input)


@pytest.mark.now
def test_export_query_write():
    print('test_export_query_write')
    input = read_dataframe('Test_DataSource', query='SELECT * FROM table')
    write_dataframe(input, 'Mitch Out')
    output = read_dataframe('Mitch Out', query='SELECT * FROM table')
    print(output)


@pytest.mark.now
def test_export_query_write_append():
    print('test_export_query_write_append')
    input = read_dataframe('czxczxcxcczx 1', query='SELECT * FROM table')
    print(input)
    df = pd.DataFrame({'Name': ['Eve'], 'Birthday': ['2000-05-05 04:08:00'], 'time': ['2019-07-17 04:08:00'],
                       'FloatingPoint': [35188.1723]})
    write_dataframe(df, 'czxczxcxcczx 1', update_method="APPEND")
    output = read_dataframe('czxczxcxcczx 1', query='SELECT * FROM table')
    print("output")
    print(output)


@pytest.mark.now
def test_export_query_write_upsert():
    print('test_export_query_write_upsert')
    input = read_dataframe('Mitch Out', query='SELECT * FROM table')
    print(input)
    data = [[155, 'VVV', '11/12/2020', 200, 'Nashik'], [124, 'FFF', '10/12/2020', 200, 'kashik']]
    df = pd.DataFrame(data, columns=['P', 'D', 'date', 'price', 'city'])
    write_dataframe(df, 'Mitch Out', update_method="upsert", update_key="P")
    output = read_dataframe('Mitch Out', query='SELECT * FROM table')
    print("output")
    print(output)


@pytest.mark.now
def test_export_query_write_partition():
    print('test_export_query_write_partition')
    input = read_dataframe('Mitch Out', query='SELECT * FROM table')
    print(input)
    data = [[101, 'VVV', '10/12/2020', 200, 'Nashik'], [123, 'CCC', '10/12/2020', 200, 'kashik'], [145, 'GGG', '10/12/2020', 200, 'kashik']]
    df = pd.DataFrame(data, columns=['P', 'D', 'date', 'price', 'city'])
    write_dataframe(df, 'Mitch Out', update_method="PARTITION", partition_name="tag")
    output = read_dataframe('Mitch Out', query='SELECT * FROM table')
    print("output")
    print(output)


@pytest.mark.integration
def test_get_workspace():
    print('test_get_workspace')
    domo = Domo(config.hostname, config.domo_hub_auth, config.workspace_id)

    workspace = domo.get_workspace()

    print(workspace)
    assert workspace is not None
    assert workspace['inputConfiguration'] is not None


@pytest.mark.integration
def test_domo_hub_auth():
    print('test_domo_hub_auth')
    domoauth = config.domo_hub_auth

    access_token = domoauth.access_token

    print("Expires in: " + str(int(domoauth.access_token_expiration - time.time())))

    print("Token: " + access_token)

    assert access_token is not None

    assert not domoauth._is_access_token_expired()


@pytest.mark.integration
def test_get_workspace_account_value():
    print('test_get_workspace_account_value')
    password = get_account_property_value(62697, 'password')
    print(password)
    assert password is not None


@pytest.mark.integration
def test_get_workspace_account_keys():
    print('test_get_workspace_account_value')
    keys = get_account_property_keys(62697)
    print(keys)
    assert keys is not None
